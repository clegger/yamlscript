# Copyright 2023-2024 Ingy dot Net
# This code is licensed under MIT license (See License for details)

- name: Test label / description
    # Each test block defines a set of test cases.
    # A test file usually require 1 input and 1 output field.
    # For instance parser_test.clj requires a yamlscript and a parse field.
    # A test block need not specify all fields for every test file.
  yamlscript: |
    # YAMScript code compilation input
  parse: |
    # YAML Parser events
  compose: |
    # YAML Composer tree
  resolve: |
    # Composed tree with tags resolved
  build: |
    # Read each !exp scalar into Clojure AST forms
  transform: |
    # Transform the YS macros (defsyn)
  construct: |
    # Construct a full Clojure AST
  print: |
    # Clojure code compilation output
  TEMPLATE: true
    # 'TEMPLATE: true' is here to ignore this test block


- name: Most YAML syntax forms in one example
  yamlscript: |
    --- !yamlscript/v0
    a: 'b'
    "c": |
      d
    ? - e: >
          f
    : - {g: !h &i j}
      - [*k, [l]]
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "a"
    "=VAL", :' "b"
    "=VAL", :$ "c"
    "=VAL", :| "d\n"
    "+SEQ"
    "+MAP"
    "=VAL", := "e"
    "=VAL", :> "f\n"
    "-MAP"
    "-SEQ"
    "+SEQ"
    "+MAP", :flow true
    "=VAL", := "g"
    "=VAL", :& "i", :! "h", := "j"
    "-MAP"
    "+SEQ", :flow true
    "=ALI", :* "k"
    "+SEQ", :flow true
    "=VAL", := "l"
    "-SEQ"
    "-SEQ"
    "-SEQ"
    "-MAP"
  compose: |
    {:! "yamlscript/v0" :% [
      {:= "a"}
      {:' "b"}
      {:$ "c"}
      {:| "d\n"}
      {:- [
        {:% [
          {:= "e"}
          {:> "f\n"} ]} ]}
      {:- [
        {:%% [
          {:= "g"}
          {:& "i", :! "h", := "j"} ]}
        {:-- [
          {:* "k"}
          {:-- [
            {:= "l"}
          ]} ]} ]} ]}


- name: Nested parse events test
  yamlscript: |
    a:
      b:
        c: d
      e: f
    g: h
  parse: |
    "+MAP"
    "=VAL", := "a"
    "+MAP"
    "=VAL", := "b"
    "+MAP"
    "=VAL", := "c"
    "=VAL", := "d"
    "-MAP"
    "=VAL", := "e"
    "=VAL", := "f"
    "-MAP"
    "=VAL", := "g"
    "=VAL", := "h"
    "-MAP"


- name: Basic function call with 2 args (test all phases)
  yamlscript: |
    --- !yamlscript/v0
    a: b c
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "a"
    "=VAL", := "b c"
    "-MAP"
  compose: |
    {:! "yamlscript/v0", :% [
      {:= "a"} {:= "b c"} ]}
  resolve: |
    {:pairs [
      {:exp "a"}
      {:exp "b c"}
    ]}
  build: |
    {:pairs [
      {:Sym a}
      [{:Sym b} {:Sym c}] ]}
  transform: |
    {:pairs [
      {:Sym a}
      [{:Sym b} {:Sym c}] ]}
  construct: |
    {:Top [{:Lst [ {:Sym a} {:Sym b} {:Sym c} ]}]}
  print: |
    (a b c)


- name: Dot escaping
  yamlscript: |
    --- !yamlscript/v0
    map inc: .[2 4 6 8]
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "map inc"
    "=VAL", := ".[2 4 6 8]"
    "-MAP"
  compose: |
    {:! "yamlscript/v0" :% [
      {:= "map inc"}
      {:= ".[2 4 6 8]"} ]}
  print: |
    (map inc [2 4 6 8])


- name: YS reader forms
  yamlscript: |
    --- !yamlscript/v0
    prn: .["str" \c 42 foo true false nil]
    prn: .{:a 1 :c 2 :b 3}
    prn: ."A longer string"
  build: |
    {:pairs [
     {:Sym prn}
     {:Vec
      [{:Str "str"}
       {:Chr c}
       {:Int 42}
       {:Sym foo}
       {:Bln true}
       {:Bln false}
       {:Nil nil} ]}
     {:Sym prn}
     {:Map
      [{:Key :a}
       {:Int 1}
       {:Key :c}
       {:Int 2}
       {:Key :b}
       {:Int 3} ]}
     {:Sym prn}
     {:Str "A longer string"} ]}
  print: |
    (prn ["str" \c 42 foo true false nil])
    (prn {:a 1, :c 2, :b 3})
    (prn "A longer string")


- name: Basic math ysexpr
  yamlscript: |
    --- !yamlscript/v0
    inc: (6 * 7)
  build: |
    {:pairs
     [{:Sym inc}
      {:Lst [{:Sym *} {:Int 6} {:Int 7}]}]}
  print: |
    (inc (_* 6 7))


- name: Function call ysexpr
  yamlscript: |
    --- !yamlscript/v0
    say: str("The number is:\ " inc(41))
  build: |
    {:pairs
     [{:Sym say}
      {:Lst
       [{:Sym str}
        {:Str "The number is: "}
        {:Lst [{:Sym inc} {:Int 41}]}]}]}
  print: |
    (say (str "The number is: " (inc 41)))


- name: let expression
  yamlscript: |
    !yamlscript/v0
    foo =: 123
  resolve: |
    {:pairs [{:let "foo ="} {:exp "123"}]}
  build: |
    {:pairs
     [[{:Sym let} {:Sym foo}]
     {:Int 123}]}
  print: |
    (let [foo 123])


- name: defn expression
  yamlscript: |
    !yamlscript/v0
    defn foo(a b): (a + b)
  resolve: |
    {:pairs [{:defn "defn foo(a b)"} {:exp "(a + b)"}]}
  build: |
    {:pairs
     [[{:Sym defn} {:Sym foo} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:Lst [{:Sym +} {:Sym a} {:Sym b}]}]}
  print: |
    (defn foo [a b] (_+ a b))


- name: Structured defn expression
  yamlscript: |
    !yamlscript/v0
    defn foo(a b):
      add: a b
  build: |
    {:pairs
     [[{:Sym defn} {:Sym foo} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:pairs
       [{:Sym add}
        [{:Sym a} {:Sym b}]]}]}
  print: |
    (defn foo [a b] (add a b))


- name: let expressions
  yamlscript: |
    !yamlscript/v0
    foo =: 123
    defn bar(a b):
      c =: (a + b)
      =>: 2 * c
    bar: 10 20
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "foo ="
    "=VAL", := "123"
    "=VAL", := "defn bar(a b)"
    "+MAP"
    "=VAL", := "c ="
    "=VAL", := "(a + b)"
    "=VAL", := "=>"
    "=VAL", := "2 * c"
    "-MAP"
    "=VAL", := "bar"
    "=VAL", := "10 20"
    "-MAP"
  compose: |
    {:! "yamlscript/v0" :% [
      {:= "foo ="}
      {:= "123"}
      {:= "defn bar(a b)"}
      {:% [
        {:= "c ="}
        {:= "(a + b)"}
        {:= "=>"}
        {:= "2 * c"} ]}
      {:= "bar"}
      {:= "10 20"} ]}
  resolve: |
    {:pairs [
      {:let "foo ="}
      {:exp "123"}
      {:defn "defn bar(a b)"}
      {:pairs [
        {:let "c ="}
        {:exp "(a + b)"}
        {:exp "=>"}
        {:exp "2 * c"} ]}
      {:exp "bar"}
      {:exp "10 20"} ]}
  build: |
    {:pairs
     ([{:Sym let} {:Sym foo}]
      {:Int 123}
      [{:Sym defn} {:Sym bar} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:pairs
       ([{:Sym let} {:Sym c}]
        {:Lst [{:Sym +} {:Sym a} {:Sym b}]}
        {:Sym =>}
        {:Lst [{:Sym *} {:Int 2} {:Sym c}]})}
      {:Sym bar}
      [{:Int 10} {:Int 20}])}
  print: |
    (let [foo 123] (defn bar [a b] (let [c (_+ a b)] (_* 2 c))) (bar 10 20))


- name: The 'if' special form
  yamlscript: |
    !yamlscript/v0
    if (a > b):
      foo(a b)
      bar(a b)
  print: |
    (if (> a b) (foo a b) (bar a b))


- name: Top level scalar in data mode
  yamlscript: |
    (foo bar)
  parse: |
    "=VAL", := "(foo bar)"
  resolve: |
    {:str "(foo bar)"}
  print: |
    "(foo bar)"


- name: Top level scalar in code mode
  yamlscript: |
    !yamlscript/v0
    (foo bar)
  parse: |
    "=VAL", :! "yamlscript/v0", := "(foo bar)"
  resolve: |
    {:exp "(foo bar)"}
  print: |
    (foo bar)


- name: Top level comment eats following lines
  yamlscript: |
    !yamlscript/v0
    ; comment
    (foo bar)
  resolve: |
    {:exp "; comment (foo bar)"}
  parse: |
    "=VAL", :! "yamlscript/v0", := "; comment (foo bar)"
  print: |


- name: Switch to code mode
  yamlscript: |
    !yamlscript/v0/data
    str: foo bar
    num: ! inc(41)
    bar: ! load("bar.yaml")
  resolve: |
    {:map
     [{:str "str"}
      {:str "foo bar"}
      {:str "num"}
      {:exp "inc(41)"}
      {:str "bar"}
      {:exp "load(\"bar.yaml\")"}]}
  build: |
    {:Map
     [{:Str "str"}
      {:Str "foo bar"}
      {:Str "num"}
      {:Lst [{:Sym inc} {:Int 41}]}
      {:Str "bar"}
      {:Lst [{:Sym load} {:Str "bar.yaml"}]}]}
  construct: |
    {:Top
     [{:Map
       [{:Str "str"}
        {:Str "foo bar"}
        {:Str "num"}
        {:Lst [{:Sym inc} {:Int 41}]}
        {:Str "bar"}
        {:Lst [{:Sym load} {:Str "bar.yaml"}]}]}]}
  print: |
    {"str" "foo bar", "num" (inc 41), "bar" (load "bar.yaml")}


- name: Shebang line with ys-0 implies !yamlscript/v0
  yamlscript: |
    #!/usr/bin/env ys-0

    say: "Hi"
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "say"
    "=VAL", :$ "Hi"
    "-MAP"


- name: Shebang line with ys-0 and !yamlscript/... tag ignored
  yamlscript: |
    #!/usr/bin/env ys-0
    !yamlscript/v0/:
    say: "Hi"
  parse: |
    "+MAP", :! "yamlscript/v0/:"
    "=VAL", := "say"
    "=VAL", :$ "Hi"
    "-MAP"


- name: Double quoted string with escaped newline
  yamlscript: |
    #!/usr/bin/env ys-0
    x =: "a\nb"
    y =: ("c" + "d\ne")
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "x ="
    "=VAL", :$ "a\nb"
    "=VAL", := "y ="
    "=VAL", := "(\"c\" + \"d\\ne\")"
    "-MAP"
  build: |
    {:pairs
     ([{:Sym let} {:Sym x}]
      {:Str "a\nb"}
      [{:Sym let} {:Sym y}]
      {:Lst [{:Sym +} {:Str "c"} {:Str "d\ne"}]})}


- name: fn special form
  yamlscript: |
    !yamlscript/v0
    add =:
      fn(a b): a + b
  resolve: |
    {:pairs
     [{:let "add ="} {:pairs [{:exp "fn [a b]"} {:exp "a + b"}]}]}
  clojure: |
    (let [add (fn [a b] (_+ a b))])


- name: Support '%:' for left/right grouping
  yamlscript: |
    !yamlscript/v0
    foo %:
      (a > b): c
      (a < d): e
      =>: f
  resolve: |
    {:pairs
     [{:exp "foo"}
      {:forms
       [{:exp "(a > b)"}
        {:exp "c"}
        {:exp "(a < d)"}
        {:exp "e"}
        {:exp "=>"}
        {:exp "f"}]}]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym foo}
        {:Lst [{:Sym >} {:Sym a} {:Sym b}]}
        {:Sym c}
        {:Lst [{:Sym <} {:Sym a} {:Sym d}]}
        {:Sym e}
        {:Sym f}]}]}
  print: |
    (foo (> a b) c (< a d) e f)


- name: Support default fn arguments
  yamlscript: |
    !yamlscript/v0
    defn foo(a b=42 c="OK"): .[c b a]
  build: |
    {:pairs
     [[{:Sym defn} {:Sym foo} nil]
      [{:Lst
        [{:Vec [{:Sym a} {:Sym b} {:Sym c}]}
         {:Vec [{:Sym c} {:Sym b} {:Sym a}]}]}
       {:Lst
        [{:Vec [{:Sym a} {:Sym b}]}
         {:Lst [{:Sym foo} {:Sym a} {:Sym b} {:Str "OK"}]}]}
       {:Lst
        [{:Vec [{:Sym a}]}
         {:Lst [{:Sym foo} {:Sym a} {:Int 42} {:Str "OK"}]}]}]]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym defn}
        {:Sym foo}
        nil
        {:Lst
         [{:Vec [{:Sym a} {:Sym b} {:Sym c}]}
          {:Vec [{:Sym c} {:Sym b} {:Sym a}]}]}
        {:Lst
         [{:Vec [{:Sym a} {:Sym b}]}
          {:Lst [{:Sym foo} {:Sym a} {:Sym b} {:Str "OK"}]}]}
        {:Lst
         [{:Vec [{:Sym a}]}
          {:Lst [{:Sym foo} {:Sym a} {:Int 42} {:Str "OK"}]}]}]}]}
  print: |
    (defn
     foo
     ([a b c] [c b a])
     ([a b] (foo a b "OK"))
     ([a] (foo a 42 "OK")))


- name: All args have defaults
  yamlscript: |
    !yamlscript/v0
    defn foo(a=1 b=2 c=3): .[c b a]
  print: |
    (defn
     foo
     ([a b c] [c b a])
     ([a b] (foo a b 3))
     ([a] (foo a 2 3))
     ([] (foo 1 2 3)))


- name: Construct :Lst objects
  yamlscript: |
    !yamlscript/v0
    defn foo(a=1):
      say: a
  print: |
    (defn foo ([a] (say a)) ([] (foo 1)))
