<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YAMLScript</title>
  <subtitle></subtitle>
  <link href="https://yamlscript.org/feed.xml" rel="self"/>
  <link href="https://yamlscript.org/"/>
  
    <updated>2023-12-01T00:00:00Z</updated>
  
  <id>https://yamlscript.org</id>
  <author>
    <name>Ingy döt Net</name>
    <email>ingy@yaml.com</email>
  </author>
  
    
    <entry>
      <title>Welcome to the YAMLScript Blog</title>
      <link href="https://yamlscript.org/posts/welcome-to-the-yamlscript-blog/"/>
      <updated>2023-10-26T00:00:00Z</updated>
      <id>https://yamlscript.org/posts/welcome-to-the-yamlscript-blog/</id>
      <content type="html">
        <![CDATA[
      <p><strong>Greetings!</strong></p>
<p>Welcome to the YAMLScript blog. This is where we will introduce you to novel concepts about YAMLScript as the language evolves.</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>YAMLScript Advent 2023</title>
      <link href="https://yamlscript.org/posts/advent-2023/dec-01/"/>
      <updated>2023-12-01T00:00:00Z</updated>
      <id>https://yamlscript.org/posts/advent-2023/dec-01/</id>
      <content type="html">
        <![CDATA[
      <h3>Seasons Greetings, my YAML friends!</h3>
<p>What if I told you that you could write a <strong>program in YAML</strong> that would
generate a Christmas tree?</p>
<p>Well, you can! Here's how:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token comment">#!/usr/bin/env ys-0</span><br><br><span class="token comment"># tree.ys -- Generate a Christmas tree of width n * 2 - 1</span><br><br><span class="token key atrule">defn main(width=5)</span><span class="token punctuation">:</span><br>  <span class="token key atrule">say</span><span class="token punctuation">:</span> tree(width)<br><br><span class="token key atrule">defn tree(width)</span><span class="token punctuation">:</span><br>  <span class="token key atrule">stars =</span><span class="token punctuation">:</span> \("<span class="token important">*"</span> * %)<br>  <span class="token key atrule">spaces =</span><span class="token punctuation">:</span> \(" " * %)<br>  <span class="token key atrule">line =</span><span class="token punctuation">:</span><br>    <span class="token key atrule">fn(num)</span><span class="token punctuation">:</span><br>      spaces(width <span class="token punctuation">-</span> 1) +<br>      stars(1 + (2 * (num <span class="token punctuation">-</span> width))) +<br>      "\n"<br>  <span class="token key atrule">trunk =</span><span class="token punctuation">:</span> \(spaces(%) + "<span class="token important">*\n")</span><br><br>  <span class="token key atrule">join</span><span class="token punctuation">:</span><br>    <span class="token key atrule">map line</span><span class="token punctuation">:</span> (width .. <span class="token punctuation">-</span>1)<br>    <span class="token key atrule">trunk</span><span class="token punctuation">:</span> width<br>    <span class="token key atrule">trunk</span><span class="token punctuation">:</span> width</code></pre>
<p>Let's get a tree!</p>
<pre class="language-bash"><code class="language-bash">$ ys tree.ys<br>     *<br>    ***<br>   *****<br>  *******<br> *********<br>     *<br>     *</code></pre>
<p>That's a pretty nice tree, but it's a little small. Let's make it bigger!</p>
<pre class="language-bash"><code class="language-bash">$ ys tree.ys <span class="token number">10</span><br>          *<br>         ***<br>        *****<br>       *******<br>      *********<br>     ***********<br>    *************<br>   ***************<br>  *****************<br> *******************<br>          *<br>          *</code></pre>
<p>Welcome to the first day of YAMLScript Advent 2023!
We're going to be writing a lot of YAMLScript this month, so let's get started…</p>
<p>Wait! What is YAMLScript?</p>
<p>YAMLScript is a new programming language that uses YAML as its syntax.
You can do anything in YAMLScript that you can do in a language like
Python or JavaScript such as:</p>
<ul>
<li>Defining functions</li>
<li>Using variables</li>
<li>String manipulation and interpolation</li>
<li>Loops and conditionals</li>
<li>Importing modules</li>
<li>And more!</li>
</ul>
<p>YAMLScript looks and feels like an imperative programming language, but it's
actually a functional programming language.
This means that YAMLScript programs are made up of expressions that are
evaluated to produce a result.</p>
<p>But why would you even want to write a program in YAML?</p>
<p>YAMLScript is a full-featured, general purpose programming language, but it's
also designed to be a great language for writing YAML configuration files.
To that point, almost all YAML files are valid YAMLScript programs!
And they evaluate to the same result that a YAML loader would produce.</p>
<p>For example, here's a YAML file that defines a list of fruits:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token comment"># fruits.yaml</span><br><span class="token punctuation">-</span> apple<br><span class="token punctuation">-</span> banana<br><span class="token punctuation">-</span> cherry</code></pre>
<p>Let's run this file as a YAMLScript program:</p>
<pre class="language-bash"><code class="language-bash">$ ys fruits.yaml<br>$</code></pre>
<p>Nothing happens!</p>
<p>But why would anything happen? The program doesn't do anything!</p>
<p>It's the same as running this Python program:</p>
<pre class="language-python"><code class="language-python">$ python <span class="token operator">-</span>c <span class="token string">'["apple", "banana", "cherry"]'</span><br>$</code></pre>
<p>To <em>evaluate</em> a YAMLScript program, we need to use the <code>--load</code> option:</p>
<pre class="language-bash"><code class="language-bash">$ ys <span class="token parameter variable">--load</span> fruits.yaml<br><span class="token punctuation">[</span><span class="token string">"apple"</span>, <span class="token string">"banana"</span>, <span class="token string">"cherry"</span><span class="token punctuation">]</span><br>$</code></pre>
<p>We got some JSON back!
That's because by default, <code>--load</code> evaluates the YAMLScript and prints the
result as JSON.</p>
<p>What if we want to include these fruits in our YAML grocery list?
Let's try it:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token comment"># grocery-list.yaml</span><br><span class="token punctuation">-</span> bread<br><span class="token punctuation">-</span> <span class="token key atrule">fruits</span><span class="token punctuation">:</span> load("fruits.yaml")<br><span class="token punctuation">-</span> milk</code></pre>
<p>Let's add the <code>--yaml</code> option to print the result as YAML:</p>
<pre class="language-bash"><code class="language-bash">$ ys <span class="token parameter variable">--load</span> grocery-list.yaml <span class="token parameter variable">--yaml</span><br>- bread<br>- fruits: load<span class="token punctuation">(</span><span class="token string">"fruits.yaml"</span><span class="token punctuation">)</span><br>- milk<br>$</code></pre>
<p>That's not what we wanted!
We wanted the contents of the fruits list to be included in the grocery list.</p>
<p>But if you think about it, this is exactly what we asked for.
Since every YAML file is a valid YAMLScript program, it certainly should be
loaded just like any other YAML loader would do it.</p>
<p>Let's fix this to do what we want:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token comment"># grocery-list.yaml</span><br><span class="token tag">!yamlscript/v0/</span><br><span class="token punctuation">-</span> bread<br><span class="token punctuation">-</span> <span class="token key atrule">fruits</span><span class="token punctuation">:</span> <span class="token tag">!</span> load("fruits.yaml")<br><span class="token punctuation">-</span> milk</code></pre>
<p>Now when we run it:</p>
<pre class="language-bash"><code class="language-bash">$ ys <span class="token parameter variable">-l</span> <span class="token parameter variable">-Y</span> grocery-list.yaml<br>- bread<br>- fruits:<br>  - apple<br>  - banana<br>  - cherry<br>- milk<br>$</code></pre>
<p>There we go! We got our fruits!</p>
<p>So what did we do here?
We added 2 things:</p>
<ul>
<li>A <code>!yamlscript/v0/</code> tag at the top</li>
<li>A <code>!</code> tag before the <code>load</code> function call</li>
</ul>
<p>We won't get into the details of what these tags mean today, but you'll learn
about them soon enough.</p>
<h3>YAMLScript Advent 2023 Teasers</h3>
<p>My name is <a href="https://github.com/ingydotnet">Ingy döt Net</a>.
I'm one of the original creators of the <a href="https://yaml.org/">YAML data language</a> and I lead the <a href="https://yaml.org/spec/1.2.2/ext/team/">YAML Language Development Team</a>.</p>
<p>I've been working on YAMLScript for about a year now, and I'm excited to finally
share it with you.
I believe that YAMLScript is going to take YAML to exciting new places, while
remedying many of its shortcomings, limitations and frustrations.
I hope you'll come to agree as you join me on this holiday season unwrapping of
the gift that is YAMLScript!</p>
<p>I also hope that you enjoyed this first day of the <strong>YAMLScript Advent 2023</strong>!
I'll be posting a new blog article every day this month, so stay tuned!
Well at least until December 25th, but I might keep going after that. :-)</p>
<p>Here's a sneak peek of some of the things to come:</p>
<ul>
<li>Installing and using <code>ys</code> — the YAMLScript interpreter</li>
<li>The history of YAMLScript</li>
<li>How YAMLScript is compiled and evaluated</li>
<li>How YAMLScript can fix many of YAML's problems</li>
<li>How to use YAMLScript like a YAML loader in any programming language</li>
<li>Is YAMLScript actually a Lisp???</li>
<li>Refactoring complicated YAML configurations with YAMLScript</li>
<li>Writing polyglot libraries in YAMLScript</li>
<li>What makes a YAML file a valid (or invalid) YAMLScript program?</li>
<li>Compiling YAMLScript to native binaries and shared libraries</li>
</ul>
<p>Hopefully you're as excited as I am to learn more about YAMLScript!</p>
<p>See you tomorrow!</p>

    ]]>
      </content>
    </entry>
  
</feed>